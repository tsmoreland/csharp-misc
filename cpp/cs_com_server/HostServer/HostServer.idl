//
// Copyright © 2020 Terry Moreland
// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), 
// to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, 
// and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, 
// WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
// 
// HostServer.idl : IDL source for HostServer
//

// This file will be processed by the MIDL tool to
// produce the type library (HostServer.tlb) and marshalling code.

import "oaidl.idl";
import "ocidl.idl";

#define GUID_ManagedName 0F21F359-AB84-41E8-9A78-36D110E6D2F9

[
    uuid(eb39a88d-2c65-47f4-a560-87941c0a456f),
    version(1.0),
]
library HostServerLib
{
    [
        object,
        uuid(f69676eb-6ffd-4638-beab-16025a42b1af),
        dual,
        nonextensible,
        pointer_default(unique)
    ]
    interface ICSharpServiceWrapper : IDispatch
    {
        [id(1), helpstring("Ping")]
        HRESULT Ping([out, retval] VARIANT_BOOL* result);

        [id(2)]
        HRESULT StringLength([in] BSTR value, [out, retval] INT* length);
    };

    [
        object,
        uuid(97ddae97-0a5f-461d-8661-beee2b7f16bf),
        dual,
        nonextensible,
        pointer_default(unique),
        custom(GUID_ManagedName, "Moreland.ServiceProxy")
    ]
    interface IServiceProxy : IDispatch
    {
        [id(1)]
        HRESULT ToUpper([in] BSTR input, [out, retval] BSTR* output);

        [id(2)]
        HRESULT RegisterOwningProcessId([in] INT processId);
    };

	importlib("stdole2.tlb");
	[
		uuid(24068c57-111c-4592-954b-1db1fcbeef2d),
		version(1.0),
        custom(GUID_ManagedName, "Moreland.CSharpServiceWrapper")
	]
	coclass CSharpServiceWrapper
	{
		[default] interface ICSharpServiceWrapper;
	};
	[
		uuid(b92786a8-1992-44a5-9135-066858bdda7c)
	]
	coclass ServiceProxy
	{
		[default] interface IServiceProxy;
	};
};

import "shobjidl.idl";
import "shobjidl.idl";
